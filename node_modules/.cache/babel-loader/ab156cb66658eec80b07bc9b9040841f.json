{"ast":null,"code":"/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// @ts-ignore Cannot find module 'merge-options' or its corresponding type declarations\nimport mergeOptions from 'merge-options';\nconst merge = mergeOptions.bind({\n  concatArrays: true,\n  ignoreUndefined: true\n});\n\nfunction mergeLocalStorageItem(key, value) {\n  const oldValue = window.localStorage.getItem(key);\n\n  if (oldValue) {\n    const oldObject = JSON.parse(oldValue);\n    const newObject = JSON.parse(value);\n    const nextValue = JSON.stringify(merge(oldObject, newObject));\n    window.localStorage.setItem(key, nextValue);\n  } else {\n    window.localStorage.setItem(key, value);\n  }\n}\n\nfunction createPromise(getValue, callback) {\n  return new Promise((resolve, reject) => {\n    try {\n      const value = getValue();\n      callback === null || callback === void 0 ? void 0 : callback(null, value);\n      resolve(value);\n    } catch (err) {\n      callback === null || callback === void 0 ? void 0 : callback(err);\n      reject(err);\n    }\n  });\n}\n\nfunction createPromiseAll(promises, callback, processResult) {\n  return Promise.all(promises).then(result => {\n    const value = (processResult === null || processResult === void 0 ? void 0 : processResult(result)) ?? null;\n    callback === null || callback === void 0 ? void 0 : callback(null, value);\n    return Promise.resolve(value);\n  }, errors => {\n    callback === null || callback === void 0 ? void 0 : callback(errors);\n    return Promise.reject(errors);\n  });\n}\n\nconst AsyncStorage = {\n  /**\n   * Fetches `key` value.\n   */\n  getItem: (key, callback) => {\n    return createPromise(() => window.localStorage.getItem(key), callback);\n  },\n\n  /**\n   * Sets `value` for `key`.\n   */\n  setItem: (key, value, callback) => {\n    return createPromise(() => window.localStorage.setItem(key, value), callback);\n  },\n\n  /**\n   * Removes a `key`\n   */\n  removeItem: (key, callback) => {\n    return createPromise(() => window.localStorage.removeItem(key), callback);\n  },\n\n  /**\n   * Merges existing value with input value, assuming they are stringified JSON.\n   */\n  mergeItem: (key, value, callback) => {\n    return createPromise(() => mergeLocalStorageItem(key, value), callback);\n  },\n\n  /**\n   * Erases *all* AsyncStorage for the domain.\n   */\n  clear: callback => {\n    return createPromise(() => window.localStorage.clear(), callback);\n  },\n\n  /**\n   * Gets *all* keys known to the app, for all callers, libraries, etc.\n   */\n  getAllKeys: callback => {\n    return createPromise(() => {\n      const numberOfKeys = window.localStorage.length;\n      const keys = [];\n\n      for (let i = 0; i < numberOfKeys; i += 1) {\n        const key = window.localStorage.key(i) || '';\n        keys.push(key);\n      }\n\n      return keys;\n    }, callback);\n  },\n\n  /**\n   * (stub) Flushes any pending requests using a single batch call to get the data.\n   */\n  flushGetRequests: () => undefined,\n\n  /**\n   * multiGet resolves to an array of key-value pair arrays that matches the\n   * input format of multiSet.\n   *\n   *   multiGet(['k1', 'k2']) -> [['k1', 'val1'], ['k2', 'val2']]\n   */\n  multiGet: (keys, callback) => {\n    const promises = keys.map(key => AsyncStorage.getItem(key));\n\n    const processResult = result => result.map((value, i) => [keys[i], value]);\n\n    return createPromiseAll(promises, callback, processResult);\n  },\n\n  /**\n   * Takes an array of key-value array pairs.\n   *   multiSet([['k1', 'val1'], ['k2', 'val2']])\n   */\n  multiSet: (keyValuePairs, callback) => {\n    const promises = keyValuePairs.map(item => AsyncStorage.setItem(item[0], item[1]));\n    return createPromiseAll(promises, callback);\n  },\n\n  /**\n   * Delete all the keys in the `keys` array.\n   */\n  multiRemove: (keys, callback) => {\n    const promises = keys.map(key => AsyncStorage.removeItem(key));\n    return createPromiseAll(promises, callback);\n  },\n\n  /**\n   * Takes an array of key-value array pairs and merges them with existing\n   * values, assuming they are stringified JSON.\n   *\n   *   multiMerge([['k1', 'val1'], ['k2', 'val2']])\n   */\n  multiMerge: (keyValuePairs, callback) => {\n    const promises = keyValuePairs.map(item => AsyncStorage.mergeItem(item[0], item[1]));\n    return createPromiseAll(promises, callback);\n  }\n};\nexport default AsyncStorage;","map":{"version":3,"sources":["AsyncStorage.ts"],"names":["merge","concatArrays","ignoreUndefined","oldValue","window","oldObject","JSON","newObject","nextValue","value","getValue","callback","resolve","reject","result","Promise","errors","AsyncStorage","getItem","createPromise","setItem","removeItem","mergeItem","mergeLocalStorageItem","clear","getAllKeys","numberOfKeys","keys","i","key","flushGetRequests","multiGet","promises","processResult","createPromiseAll","multiSet","keyValuePairs","item","multiRemove","multiMerge"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// @ts-ignore Cannot find module 'merge-options' or its corresponding type declarations\nimport mergeOptions from 'merge-options';\nimport type {\n  AsyncStorageStatic,\n  MultiCallback,\n  MultiGetCallback,\n} from './types';\n\nconst merge = mergeOptions.bind({\n  concatArrays: true,\n  ignoreUndefined: true,\n});\n\nfunction mergeLocalStorageItem(key: string, value: string) {\n  const oldValue = window.localStorage.getItem(key);\n  if (oldValue) {\n    const oldObject = JSON.parse(oldValue);\n    const newObject = JSON.parse(value);\n    const nextValue = JSON.stringify(merge(oldObject, newObject));\n    window.localStorage.setItem(key, nextValue);\n  } else {\n    window.localStorage.setItem(key, value);\n  }\n}\n\nfunction createPromise<Result, Callback extends Function>(\n  getValue: () => Result,\n  callback?: Callback\n): Promise<Result> {\n  return new Promise((resolve, reject) => {\n    try {\n      const value = getValue();\n      callback?.(null, value);\n      resolve(value);\n    } catch (err) {\n      callback?.(err);\n      reject(err);\n    }\n  });\n}\n\nfunction createPromiseAll<ReturnType, Result, ResultProcessor extends Function>(\n  promises: Promise<Result>[],\n  callback?: MultiCallback | MultiGetCallback,\n  processResult?: ResultProcessor\n): Promise<ReturnType> {\n  return Promise.all(promises).then(\n    (result) => {\n      const value = processResult?.(result) ?? null;\n      callback?.(null, value);\n      return Promise.resolve(value);\n    },\n    (errors) => {\n      callback?.(errors);\n      return Promise.reject(errors);\n    }\n  );\n}\n\nconst AsyncStorage: AsyncStorageStatic = {\n  /**\n   * Fetches `key` value.\n   */\n  getItem: (key, callback) => {\n    return createPromise(() => window.localStorage.getItem(key), callback);\n  },\n\n  /**\n   * Sets `value` for `key`.\n   */\n  setItem: (key, value, callback) => {\n    return createPromise(\n      () => window.localStorage.setItem(key, value),\n      callback\n    );\n  },\n\n  /**\n   * Removes a `key`\n   */\n  removeItem: (key, callback) => {\n    return createPromise(() => window.localStorage.removeItem(key), callback);\n  },\n\n  /**\n   * Merges existing value with input value, assuming they are stringified JSON.\n   */\n  mergeItem: (key, value, callback) => {\n    return createPromise(() => mergeLocalStorageItem(key, value), callback);\n  },\n\n  /**\n   * Erases *all* AsyncStorage for the domain.\n   */\n  clear: (callback) => {\n    return createPromise(() => window.localStorage.clear(), callback);\n  },\n\n  /**\n   * Gets *all* keys known to the app, for all callers, libraries, etc.\n   */\n  getAllKeys: (callback) => {\n    return createPromise(() => {\n      const numberOfKeys = window.localStorage.length;\n      const keys: string[] = [];\n      for (let i = 0; i < numberOfKeys; i += 1) {\n        const key = window.localStorage.key(i) || '';\n        keys.push(key);\n      }\n      return keys;\n    }, callback);\n  },\n\n  /**\n   * (stub) Flushes any pending requests using a single batch call to get the data.\n   */\n  flushGetRequests: () => undefined,\n\n  /**\n   * multiGet resolves to an array of key-value pair arrays that matches the\n   * input format of multiSet.\n   *\n   *   multiGet(['k1', 'k2']) -> [['k1', 'val1'], ['k2', 'val2']]\n   */\n  multiGet: (keys, callback) => {\n    const promises = keys.map((key) => AsyncStorage.getItem(key));\n    const processResult = (result: string[]) =>\n      result.map((value, i) => [keys[i], value]);\n    return createPromiseAll(promises, callback, processResult);\n  },\n\n  /**\n   * Takes an array of key-value array pairs.\n   *   multiSet([['k1', 'val1'], ['k2', 'val2']])\n   */\n  multiSet: (keyValuePairs, callback) => {\n    const promises = keyValuePairs.map((item) =>\n      AsyncStorage.setItem(item[0], item[1])\n    );\n    return createPromiseAll(promises, callback);\n  },\n\n  /**\n   * Delete all the keys in the `keys` array.\n   */\n  multiRemove: (keys, callback) => {\n    const promises = keys.map((key) => AsyncStorage.removeItem(key));\n    return createPromiseAll(promises, callback);\n  },\n\n  /**\n   * Takes an array of key-value array pairs and merges them with existing\n   * values, assuming they are stringified JSON.\n   *\n   *   multiMerge([['k1', 'val1'], ['k2', 'val2']])\n   */\n  multiMerge: (keyValuePairs, callback) => {\n    const promises = keyValuePairs.map((item) =>\n      AsyncStorage.mergeItem(item[0], item[1])\n    );\n    return createPromiseAll(promises, callback);\n  },\n};\n\nexport default AsyncStorage;\n"]},"metadata":{},"sourceType":"module"}